<center><span id="errors"></span></center>

<div class="property-page">
  <center>
    <h2>
      <a href="<%= property_url(@property) %>">
        <%= @property.address %> <%= @property.floor %> Floor
      </a>
    </h2>

    <% @properties.each do |property| %>
      <% if property == @property %>
        <% class_str = "btn btn-default current-button" %>
      <% else %>
        <% class_str = "btn btn-default" %>
      <% end %> 
      <%= link_to "#{property.address} #{property.floor} Floor", dashboard_url(property), class: class_str %>
    <% end %>
  </center>

  <br><br>

  <div class="diagram2">
    <form id="property-form">


      <div class="left-slider-input">
        <label for="property_purchase_price">Purchase Price</label><br>
        <input
          class="add-commas"
          id="property_purchase_price"
          name="property[purchase_price]"
          value="$<%= number_with_precision(@property.purchase_price, :precision => 0, :delimiter => ',') %>">
      </div>
      <div class="relative">
        <div class="right-slider-input">
          <input type=range min=0 max=10000000 value="<%= @property.purchase_price %>" id="property_purchase_price_slider" step="10000" oninput="purchasePriceOutputUpdate(value)" list="property_purchase_price_list">

          <datalist id="property_purchase_price_list">
            <% 0.upto(10) do |num| %>
              <option><%= num * 10**6 %></option>
            <% end %>
          </datalist>
        </div>
      </div>

      <div class="left-slider-input">
        <label for="property_loan_amount">Loan Amount</label><br>
        <input
          class="add-commas"
          id="property_loan_amount"
          name="property[loan_amount]"
          value="$<%= number_with_precision(@property.loan_amount, :precision => 0, :delimiter => ',') %>">
      </div>

      <div class="relative">
        <div class="right-slider-input">
          <input type=range min=0 max=10000000 value="<%= @property.loan_amount %>" id="property_loan_amount_slider" step="10000" oninput="loanAmountOutputUpdate(value)" list="property_loan_amount_list">

          <datalist id="property_loan_amount_list">
            <% 0.upto(10) do |num| %>
              <option><%= num * 10**6 %></option>
            <% end %>
          </datalist>
        </div>
      </div>

      <div class="left-slider-input">
        <label for="property_interest_rate">Interest Rate</label><br>
        <input
          class="remove-chars-truncate"
          id="property_interest_rate"
          name="property[interest_rate]"
          value="<%= remove_trailing_zeros(@property.interest_rate) %>%">
      </div>

      <div class="relative">
        <div class="right-slider-input">
          <input type=range min=0 max=25 value="<%= @property.interest_rate %>" id="property_interest_rate_slider" step="0.01" oninput="interestRateOutputUpdate(value)" list="property_interest_rate_list">

          <datalist id="property_interest_rate_list">
            <% 0.upto(10) do |num| %>
              <option><%= num * 2.5 %></option>
            <% end %>
          </datalist>
        </div>
      </div>

      <div class="left-slider-input2">
        <label for="property_interest_only">Interest Only</label><br>
        <input id="interest-only-yes" type="radio" name="property[interest_only]" value="Yes" <%= "checked" if @property.interest_only %>> Yes&nbsp;&nbsp;&nbsp;
        <input id="interest-only-no" type="radio" name="property[interest_only]" value="No" <%= "checked" unless @property.interest_only %>> No
      </div>

      <div class="relative2">
        <div class="right-slider-input2">
          <label for="property_amortization">Amortization</label><br>

          <select name="property[amortization]">
            <% [5, 7, 10, 15, 20, 25, 30].each do |num| %>
              <option value="<%= num %>" <%= "selected" if @property.amortization == num  %>><%= num %> years</option>
            <% end %>
          </select>
        </div>
      </div>

      <div class="left-slider-input">
        <label for="property_income">Income</label><br>
        <input
          class="add-commas"
          id="property_income"
          name="property[income]"
          value="$<%= number_with_precision(@property.income, :precision => 0, :delimiter => ',') %>">
      </div>

      <div class="relative">
        <div class="right-slider-input">
          <input type=range min=0 max=2000000 value="<%= @property.income %>" id="property_income_slider" step=2000 oninput="incomeOutputUpdate(value)" list="property_income_list">

          <datalist id="property_income_list">
            <% 0.upto(10) do |num| %>
              <option><%= num * 2*10**5 %></option>
            <% end %>
          </datalist>
        </div>
      </div>

      <div class="left-slider-input">
        <label for="property_expenses">Expenses</label><br>
        <input
          class="add-commas"
          id="property_expenses"
          name="property[expenses]"
          value="$<%= number_with_precision(@property.expenses, :precision => 0, :delimiter => ',') %>">
      </div>

      <div class="relative">
        <div class="right-slider-input">
          <input type=range min=0 max=1000000 value="<%= @property.expenses %>" id="property_expenses_slider" step=1000 oninput="expensesOutputUpdate(value)" list="property_expenses_list">

          <datalist id="property_expenses_list">
            <% 0.upto(10) do |num| %>
              <option><%= num * 10**5 %></option>
            <% end %>
          </datalist>
        </div>
      </div>
    </form>

    <br><br>

    <div class="top-box">
      <div class="inner">Investment @ <br>
        <span class="cap-rate-span">
          <%= @property.cap_rate %></span>% Cap Rate
      </div>

      <div class="investment-top">
        <span id="purchase-price-span">&#36;<%= number_with_precision(@property.purchase_price, :precision => 0, :delimiter => ',') %>
        </span>
      </div>
    </div>

    <div class="top-box">
      <div class="inner4">Leveraged (Borrowing) vs. Unleveraged</div>

      <div class="middle2"></div>

      <div class="left">
        <span id="loan-amount-span">&#36;<%= number_with_precision(@property.loan_amount, :precision => 0, :delimiter => ',') %>
        </span> &#64;<br>
        <font color="black">
          <span id="interest-rate-span">
            <%= remove_trailing_zeros(@property.interest_rate) %>&#37;</span>
        </font> Interest
      </div>

      <div class="right">Borrow <br>Nothing</div>
    </div>

    <div class="top-box">
      <div class="inner">Net Operating <br>Income</div>

      <div class="investmentb"></div>

      <div class="left2">
        &#36;<span class="net-operating-income-span"><%= number_with_precision(@property.net_operating_income, :precision => 0, :delimiter => ',') %>
        </span>
      </div>

      <div class="right2">
        &#36;<span class="net-operating-income-span"><%= number_with_precision(@property.net_operating_income, :precision => 0, :delimiter => ',') %>
        </span>
      </div>
    </div>

    <div class="top-box">
      <div class="inner">Debt Service <br>Payments</div>

      <div class="investmentb"></div>

      <div class="left2">
        &#36;<span id="debt-service-span"><%= number_with_precision(@property.debt_service, :precision => 0, :delimiter => ',') %>
        </span>
      </div>

      <div class="right2">$0</div>
    </div>

    <div class="top-box">
      <div class="inner2">Cash Flow</div>

      <div class="investment2b"></div>

      <div class="left3">
        &#36;<span id="cash-flow-span"><%= number_with_precision(@property.cash_flow, :precision => 0, :delimiter => ',') %>
        </span>
      </div>

      <div class="right3">
        &#36;<span class="net-operating-income-span"><%= number_with_precision(@property.net_operating_income, :precision => 0, :delimiter => ',') %>
        </span>
      </div>
    </div>

    <div class="top-box">
      <div class="inner3">Cash on Cash <br>(Income Earned / <br>Initial Investment)</div>

      <div class="middle-result2"></div>

      <div class="left-result">
        <span id="cash-on-cash-span">
          <%= @property.cash_on_cash %></span>&#37;
      </div>

      <div class="right-result">
        <span class="cap-rate-span">
          <%= @property.cap_rate %></span>&#37;
      </div>
    </div>

    <div class="flow"></div>

    <div class="flow2b"></div>

    <div class="down-payment"><b>Down Payment</b><br> 
      &#36;<span id="down-payment-span"><%= number_with_precision(@property.down_payment, :precision => 0, :delimiter => ',') %>
      </span>
    </div>

    <div class="loan-to-value"><b>Loan to value<br>(LTV &#37;)</b><br>
      <span id="loan-to-value-span">
        <%= @property.loan_to_value %></span>&#37;
    </div>

    <div class="dscr"><b>Debt Service<br>Coverage Ratio<br>(DSCR)</b><br>
      <span id="dscr-span">
        <%= @property.dscr %>
      </span>
    </div>
  </div>

  <center><a href="/equations.txt">Link to equations</a><br><br></center>

  <h3>Page Views</h3>
  (does not count logged in user on own properties)

  <% data = @property.views.group_by_day(:created_at).count %>
  <% new_data = {} %>
  <% data.each { |key, value| new_data[key.to_date] = value } %>

  <%= line_chart(new_data, discrete: true) %>

  <h3>Showings</h3>

  <% data = @property.showings.group_by_day(:created_at).count %>
  <% new_data = {} %>
  <% data.each { |key, value| new_data[key.to_date] = value } %>

  <%= line_chart(new_data, discrete: true) %>

  <br>
  <div class="group">
    <% @property.showings.each do |showing| %>
      <div class="showing"> 
        <%= showing.name %><br>
        <%= showing.title %><br>
        <%= showing.email %><br>
        <%= showing.company %><br>
        <%= showing.phone %><br>
      </div>
    <% end %>
  </div>
</div>

<br><br><br><br>

<script language="JavaScript">

  var removeCharsTruncateThis = function(event) {
    if(event.which >= 37 && event.which <= 40){
      event.preventDefault();
    }
    var $this = $(this);
    var num = $this.val();
    num = removeCharsTruncate(num);
    $this.val(num);
  }

  function removeCharsTruncate(x) {
    x = x.replace(/[^\d.-]/g, '');
    x = removeDoubles(x);
    x = fixNegativeSign(x);
    x = Math.round(Number(x) * 100) / 100.0;
    x = x + "%";
    return x;
  }

  var addCommasThis = function(event) {
    if(event.which >= 37 && event.which <= 40){
      event.preventDefault();
    }
    var $this = $(this);
    var num = $this.val();
    num = addCommas(num);
    $this.val(num);
  }

  var addCommas = function(x) {
    x = x.replace(/[^\d.-]/g, '');
    x = removeDoubles(x);
    x = fixNegativeSign(x);
    x = Number(x);
    if (x > 0) {
      x = Math.floor(x);
    } else {
      x = Math.ceil(x);
    }
    x = x.toString();
    x = x.replace(/(\d)(?=(\d{3})+(?!\d))/g, "$1,");
    x = "$" + x;
    return x;
  }

  var fixNegativeSign = function (str) {
    if (str.indexOf("-") > -1) {
      str = str.replace(/-/g, '');
      str = "-" + str;
      return str;
    } else {
      return str;
    }
  }

  var removeDoubles = function (x) {
    return removeDoubleNegative(removeDoublePeriod(x));
  }

  var removeDoublePeriod = function(x) {
    return x.replace(/\./, "x")
      .replace(/\./g, "")
      .replace(/x/, ".");
  }

  var removeDoubleNegative = function(x) {
    return x.replace(/\-/, "x")
      .replace(/\-/g, "")
      .replace(/x/, "-");
  }

  function updateFields() {

    String.prototype.capitalize = function() {
      return this.charAt(0).toUpperCase() + this.slice(1);
    }

    var data = $("#property-form").serializeJSON();

    var success = function (data) {
      $("#errors").text("");

      var purchasePrice = addCommas($("#property_purchase_price").val());
      var loanAmount = addCommas($("#property_loan_amount").val());
      var interestRate = removeCharsTruncate($("#property_interest_rate").val());

      var netOperatingIncome = data["net_operating_income"];
      var debtService = data["debt_service"];
      var cashFlow = data["cash_flow"];
      var cashOnCash = data["cash_on_cash"];
      var capRate = data["cap_rate"];
      var downPayment = data["down_payment"];
      var loanToValue = data["loan_to_value"];
      var dscr = data["dscr"];

      $("#purchase-price-span").text(purchasePrice);
      $("#loan-amount-span").text(loanAmount);
      $("#interest-rate-span").text(interestRate);

      $(".net-operating-income-span").text(netOperatingIncome);
      $("#debt-service-span").text(debtService);
      $("#cash-flow-span").text(cashFlow);
      $("#cash-on-cash-span").text(cashOnCash);
      $(".cap-rate-span").text(capRate);
      $("#down-payment-span").text(downPayment);
      $("#loan-to-value-span").text(loanToValue);
      $("#dscr-span").text(dscr);
    }

    var error = function (data) {
      $("#errors").text("");
      var $errorTitle = $("<h3>Please fix the following errors:</h3>");
      $("#errors").append($errorTitle);
      var responseText = data["responseText"];
      var responseObj = JSON.parse(responseText);
      var keys = Object.keys(responseObj);
      for (var i=0; i<keys.length; i++) {
        var key = keys[i];
        $("#errors").append(
          key.replace(/_/g, ' ').capitalize() + 
          " " + responseObj[key] + "<br />"
        );
      }
      $("#errors").append($("<hr>"));
    }

    $.ajax({
      type: "PUT",
      url: "<%= api_property_url(@property) %>",
      data: data,
      success: success,
      error: error,
      dataType: "json"
    });

  }

  $('input.add-commas').change(addCommasThis);
  $('input.remove-chars-truncate').change(removeCharsTruncateThis);

  //setup onchange and onkeyup to call updatefields when value has changed
  document.getElementById("property-form").onchange = updateFields;
  document.getElementById("property-form").onkeyup = updateFields;


  //new function for sliders
  function purchasePriceOutputUpdate(value) {
    document.querySelector('#property_purchase_price').value = addCommas(value);
  }

  function loanAmountOutputUpdate(value) {
    document.querySelector('#property_loan_amount').value = addCommas(value);
  }

  function interestRateOutputUpdate(value) {
    document.querySelector('#property_interest_rate').value = removeCharsTruncate(value);
  }

  function incomeOutputUpdate(value) {
    document.querySelector('#property_income').value = addCommas(value);
  }

  function expensesOutputUpdate(value) {
    document.querySelector('#property_expenses').value = addCommas(value);
  }

  //want to make sure not setting up an endless loop!

  var cleanUpFormat = function (value) {
    value = value.replace(/[^\d.-]/g, '');
    value = removeDoubles(value);   
    value = fixNegativeSign(value);
    return value;
  }

  document.getElementById("property_purchase_price").onkeyup = function () {
    var value = cleanUpFormat(document.getElementById("property_purchase_price").value);
    document.querySelector('#property_purchase_price_slider').value = value;
  };

  document.getElementById("property_loan_amount").onkeyup = function () {
    var value = cleanUpFormat(document.getElementById("property_loan_amount").value);
    document.querySelector('#property_loan_amount_slider').value = value;
  };

  document.getElementById("property_interest_rate").onkeyup = function () {
    var value = cleanUpFormat(document.getElementById("property_interest_rate").value);
    document.querySelector('#property_interest_rate_slider').value = value;
  };

  document.getElementById("property_income").onkeyup = function () {
    var value = cleanUpFormat(document.getElementById("property_income").value);
    document.querySelector('#property_income_slider').value = value;
  };

  document.getElementById("property_expenses").onkeyup = function () {
    var value = cleanUpFormat(document.getElementById("property_expenses").value);
    document.querySelector('#property_expenses_slider').value = value;
  };

</script>







